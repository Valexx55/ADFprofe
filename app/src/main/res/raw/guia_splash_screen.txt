https://codeshare.io/2KwJpz

https://developer.android.com/develop/ui/views/launch/splash-screen?hl=es-419

POR DEFECTO, EN LOS MÓVILES CON API 12 NOS SALE UNA PANTALLA
DE ANIMACIÓN INICIAL (PANTALLA DE PRESENTACIÓN O SPLASHSCREEN)
SIN HACER NADA

SI QUEREMOS PERSONALIZAR SU APARIENCIA, hay que seguir los siguientes pasos:

1) importar la librería de compatiblidad

dependencies {
    implementation "androidx.core:core-splashscreen:1.0.0"
}

2) Redifinir el color de fondo en el tema usado

<item name="android:windowSplashScreenBackground">@color/grissuave</item>

esto, sale en rojo por ser un atributo disponible sólo
a partir del api 31, pero no provoca fallos en versiones antiguas

3) definir el icono que sale en el centro con el atributo

windowSplashScreenAnimatedIcon

Curioso que en el caso de un movil 14, si no lo pones,
no se ve. Pero al poner este atributo, se ve.

En un movil 16, si lo especificas, sale con la máscara
redondeada y si no, sale rectangular, cogiendo el icon
de la etiqueta application del manifest, sin aplicar ninguna
máscara

A estas alturas, en un movil 10, sigue sin verse

4) no es obligario a partir de la versión 13, puesto
que la duración de la animación se infiere a partir
del icono(vectordrawble) pero podemos especificar
la duración de la pantall con el atributo

 <item name="android:windowSplashScreenAnimationDuration">1000</item>

 parece que si metes más de 3000 mil ms, internamente, tiene un límite y no hace caso

 5) también podemos poner un color de fondo al icono de la splash

 con

   <item name="android:windowSplashScreenIconBackgroundColor">@color/minaranja</item>

   pero el icono deber tener fondo transparence, para que se vea
   este color es como el fondo (dentro de la máscara)

 6) Podemos añadir una imagen al pie de la pantalla de animación
 con el atributo

 <item name="android:windowSplashScreenBrandingImage">@drawable/...</item>

 aunque El propio Android, lo desaconseja por las convenciones de diseño

7) En algunos dispositivos, puede quedar al criterio del teléfono que se vea
o no la animación, pudiendo mostrar un espacio en blanco en lugar de la splash
screee

Con este valor, supuestamente, sale siempre
<item name="android:windowSplashScreenBehavior">icon_preferred</item>

sin embargo
en la práctica, no ha tenido ningún efecto en las pruebas

 EXTRA; PUNTOS OPCIONALES (funciones en onCreate())

 8)
/**
    Por defecto, cuando ya se ha dibujado la Actividad Principal, la Splash Screen
    desaparece. Sin emabargo, al programar esta función Predraw no se pinta ningún
    fotograma, hasta que no esta función no devuelta true. Por ejemplo
    en este caso, estamos causando un retardo de 6 segundos y hasta que no acabe
    la actividad no empieza a pintarse y mientras, se ve sólo la Splash Screen
     */
    fun retardo ()
    {
        // Set up an OnPreDrawListener to the root view.
        val content = findViewById<View>(android.R.id.content)
        content.viewTreeObserver.addOnPreDrawListener(
            object : ViewTreeObserver.OnPreDrawListener {
                override fun onPreDraw(): Boolean {
                    // Check whether the initial data is ready.
                    Thread.sleep(6000)
                    return if (true) {
                        // The content is ready. Start drawing.
                        content.viewTreeObserver.removeOnPreDrawListener(this)
                        true
                    } else {
                        // The content isn't ready. Suspend.
                        false
                    }
                }
            })
    }

9)

    /**
    * La salidad de la SplashScreen, puede ser animada. De modo, que podemos
     * definir un listener al finalizar su tiempo y cargar una animación
     * como ésta
     */
    fun animacionSalidaSplash ()
    {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            splashScreen.setOnExitAnimationListener { splashScreenView ->
                // Create your custom animation.
                val slideUp = ObjectAnimator.ofFloat(
                    splashScreenView,
                    View.TRANSLATION_X,
                    0f,
                    -splashScreenView.width.toFloat()
                )
                slideUp.interpolator = AnticipateInterpolator()
                slideUp.duration = 20000L

                // Call SplashScreenView.remove at the end of your custom animation.
                slideUp.doOnEnd { splashScreenView.remove() }

                // Run your animation.
                slideUp.start()
            }
        }
    }

 /////PARA AGREGAR COMPATIBILIDAD EN LAS VERSIONES ANTERIORES A LA 12
 Y QUE TAMBIÉN APAREZCA LA SPLASH (PROBADO EN ANDROID 10)

1) tener la librería splash screen importada (igual que antes)

2) definir un tema provisional para la actividad principal, de modo
que esté vinculada a ella y sobreescriba el tema de la aplicación
En ella ,defino los elementos de la animación para versiones
anteriores a la 12, aunque con limitaciones (ver comentarios=

    <style name="Theme.App.Starting" parent="Theme.SplashScreen">

        <item name="windowSplashScreenBackground">@color/grissuave</item>
        <item name="windowSplashScreenAnimatedIcon">@drawable/ic_launcher_foreground</item>
        <item name="windowSplashScreenAnimationDuration">10000</item>
        <!-- No parece que afecte. Aún con un icono transparente-->
        <item name="windowSplashScreenIconBackgroundColor">@color/minaranja</item>
        <!-- No se puede incluir con o sin prefijo android:-->
        <!--<item name="android:windowSplashScreenBrandingImage">@drawable/imagen_derrota</item>-->


        <!-- No parece que afecte. S/e programáticamente sí que hay setearlo-->
        <item name="postSplashScreenTheme">@style/AppTheme</item>
    </style>

    En la definición de esa actividad en el manifest, se debe ligar el tema

     android:theme="@style/Theme.App.Starting"

2) Este tema no hereda de Theme.AppCompat (como sí lo hace material)
por lo que hay que resturar programáticamente el tema original en
la primera línea de código (pese a que el fichero anterior aporta el
atributo postSplashScreenTheme

override fun onCreate(savedInstanceState: Bundle?) {
        setTheme(R.style.AppTheme) // Actualizamos el tema al tema normal (eliminamos el usado para la splash screen en versiones anteriores)

3) Opcionalmente, puedo obtener una referencia a la splashscreen así


        //Esto es una splashScreen vacía en versiones anteriores a 12
        //pero se le puede definir callbacks y listeners también
        /*

        val splashScreen = installSplashScreen()//en la versión 12 estaría rellena

        splashScreen.setKeepOnScreenCondition {
            // Mantiene visible la splash mientras tu app carga datos.
            viewModel.isLoading
        } */

4) hay una limitación en la animación de salida y es que sólo puede usarse
en versiones 12 o posteriores

5) para manejar la duración del retardo, la forma con el preRender es válida todas las apis
pero se recomienda para la 12, usar el

splashScreen.setKeepOnScreenCondition (ver implementación de las 2 en MainMenuActivity